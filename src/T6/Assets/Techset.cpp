// ======================= ZoneTool =======================
// zonetool, a fastfile linker for various
// Call of Duty titles. 
//
// Project: https://github.com/ZoneTool/zonetool
// Author: RektInator (https://github.com/RektInator)
// License: GNU GPL v3.0
// ========================================================
#include "stdafx.hpp"
#include "T6/Structs.hpp"
#include "H1/Assets/Techset.hpp"
#include "H1/Assets/PixelShader.hpp"
#include "H1/Assets/VertexShader.hpp"
#include "H1/Assets/VertexDecl.hpp"

namespace ZoneTool
{
	namespace T6
	{
		std::unordered_map<int, int> mapped_techniques =
		{
			{T6::TECHNIQUE_DEPTH_PREPASS, H1::TECHNIQUE_ZPREPASS},
			{T6::TECHNIQUE_BUILD_SHADOWMAP_DEPTH, H1::TECHNIQUE_BUILD_SHADOWMAP_DEPTH},
			{T6::TECHNIQUE_UNLIT, H1::TECHNIQUE_UNLIT},
			{T6::TECHNIQUE_EMISSIVE, H1::TECHNIQUE_EMISSIVE},

			{T6::TECHNIQUE_LIT, H1::TECHNIQUE_LIT},
			{T6::TECHNIQUE_LIT_SUN, H1::TECHNIQUE_LIT_SUN_DYNAMIC_BRANCHING},
			{T6::TECHNIQUE_LIT_SUN_SHADOW, H1::TECHNIQUE_LIT_SUN_DYNAMIC_BRANCHING_CUCOLORIS},
			{T6::TECHNIQUE_LIT_SPOT, H1::TECHNIQUE_LIT_SPOT},
			{T6::TECHNIQUE_LIT_SPOT_SHADOW, H1::TECHNIQUE_LIT_SPOT_SHADOW},
			{T6::TECHNIQUE_LIT_SPOT_SQUARE, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_SPOT_SQUARE_SHADOW, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_SPOT_ROUND, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_SPOT_ROUND_SHADOW, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_OMNI, H1::TECHNIQUE_LIT_OMNI},
			{T6::TECHNIQUE_LIT_OMNI_SHADOW, H1::TECHNIQUE_LIT_OMNI_SHADOW},
			{T6::TECHNIQUE_LIT_DLIGHT_GLIGHT, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_SUN_DLIGHT_GLIGHT, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_SUN_SHADOW_DLIGHT_GLIGHT, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_SPOT_DLIGHT_GLIGHT, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_SPOT_SHADOW_DLIGHT_GLIGHT, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_SPOT_SQUARE_DLIGHT_GLIGHT, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_SPOT_SQUARE_SHADOW_DLIGHT_GLIGHT, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_SPOT_ROUND_DLIGHT_GLIGHT, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_SPOT_ROUND_SHADOW_DLIGHT_GLIGHT, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_OMNI_DLIGHT_GLIGHT, H1::TECHNIQUE_NONE},
			{T6::TECHNIQUE_LIT_OMNI_SHADOW_DLIGHT_GLIGHT, H1::TECHNIQUE_NONE},

			{T6::TECHNIQUE_LIGHT_SPOT, H1::TECHNIQUE_LIGHT_SPOT},
			{T6::TECHNIQUE_LIGHT_OMNI, H1::TECHNIQUE_LIGHT_OMNI},
			{T6::TECHNIQUE_FAKELIGHT_NORMAL, H1::TECHNIQUE_FAKELIGHT_NORMAL},
			{T6::TECHNIQUE_FAKELIGHT_VIEW, H1::TECHNIQUE_FAKELIGHT_VIEW},
			{T6::TECHNIQUE_SUNLIGHT_PREVIEW, H1::TECHNIQUE_SUNLIGHT_PREVIEW},
			{T6::TECHNIQUE_CASE_TEXTURE, H1::TECHNIQUE_CASE_TEXTURE},
			{T6::TECHNIQUE_WIREFRAME_SOLID, H1::TECHNIQUE_WIREFRAME_SOLID},
			{T6::TECHNIQUE_WIREFRAME_SHADED, H1::TECHNIQUE_WIREFRAME_SHADED},
			{T6::TECHNIQUE_DEBUG_BUMPMAP, H1::TECHNIQUE_DEBUG_BUMPMAP},
			{T6::TECHNIQUE_DEBUG_PERFORMANCE, H1::TECHNIQUE_DEBUG_BUMPMAP},
		};

		namespace
		{
			std::string clean_name(const std::string& name)
			{
				std::string new_name;

				for (auto i = 0u; i < name.size(); i++)
				{
					switch (name[i])
					{
					case '(':
						return new_name;
					case '*':
						new_name.push_back('_');
						break;
					default:
						new_name.push_back(name[i]);
					}
				}

				return new_name;
			}

			unsigned int crc32(unsigned char* program, unsigned int program_size)
			{
				if (program == nullptr)
				{
					return 0;
				}

				const auto init = crc32_z(0, 0, 0);
				return crc32_z(init, program, program_size);
			}

			std::unordered_map<T6::MaterialWorldVertexFormat, H1::MaterialWorldVertexFormat> mapped_vert_formats =
			{
				//{T6::MTL_WORLDVERT_TEX_1_NRM_1, H1::MTL_WORLDVERT_T1},
				//{T6::MTL_WORLDVERT_TEX_2_NRM_1, H1::MTL_WORLDVERT_T2N1D1},
				//{T6::MTL_WORLDVERT_TEX_2_NRM_2, H1::MTL_WORLDVERT_T2N2D2},
				//{T6::MTL_WORLDVERT_TEX_3_NRM_1, H1::MTL_WORLDVERT_T3N1D1},
				//{T6::MTL_WORLDVERT_TEX_3_NRM_2, H1::MTL_WORLDVERT_T3N1D2},
				//{T6::MTL_WORLDVERT_TEX_3_NRM_3, H1::MTL_WORLDVERT_T3N1D3},
				//{T6::MTL_WORLDVERT_TEX_4_NRM_1, H1::MTL_WORLDVERT_T4N1D1},
				//{T6::MTL_WORLDVERT_TEX_4_NRM_2, H1::MTL_WORLDVERT_T4N1D2},
				//{T6::MTL_WORLDVERT_TEX_4_NRM_3, H1::MTL_WORLDVERT_T4N1D3},
			};

			H1::MaterialWorldVertexFormat convert_world_vert_format(T6::MaterialWorldVertexFormat value)
			{
				const auto iter = mapped_vert_formats.find(value);
				if (iter != mapped_vert_formats.end())
				{
					return iter->second;
				}

				return static_cast<H1::MaterialWorldVertexFormat>(0);
			}

			std::unordered_map<T6::MaterialShaderArgumentType, H1::MaterialShaderArgumentType> mapped_shader_argument_types =
			{
				{T6::MTL_ARG_CODE_PIXEL_CONST, H1::MTL_ARG_CODE_CONST},
				{T6::MTL_ARG_CODE_VERTEX_CONST, H1::MTL_ARG_CODE_CONST},

				{T6::MTL_ARG_LITERAL_PIXEL_CONST, H1::MTL_ARG_LITERAL_CONST},
				{T6::MTL_ARG_LITERAL_VERTEX_CONST, H1::MTL_ARG_LITERAL_CONST},

				{T6::MTL_ARG_CODE_PIXEL_SAMPLER, H1::MTL_ARG_CODE_SAMPLER},
				{T6::MTL_ARG_MATERIAL_PIXEL_SAMPLER, H1::MTL_ARG_MATERIAL_SAMPLER},

				{T6::MTL_ARG_MATERIAL_PIXEL_CONST, H1::MTL_ARG_MATERIAL_CONST},
				{T6::MTL_ARG_MATERIAL_VERTEX_CONST, H1::MTL_ARG_MATERIAL_CONST},
			};

			constexpr auto h1_vertex_shader_flag = 0x2;
			constexpr auto h1_domain_shader_flag = 0x8;
			constexpr auto h1_pixel_shader_flag = 0x10;

			std::unordered_map<T6::MaterialShaderArgumentType, unsigned char> mapped_shader_flags =
			{
				{T6::MTL_ARG_CODE_PIXEL_CONST, h1_pixel_shader_flag},
				{T6::MTL_ARG_CODE_VERTEX_CONST, h1_vertex_shader_flag},

				{T6::MTL_ARG_LITERAL_PIXEL_CONST, h1_pixel_shader_flag},
				{T6::MTL_ARG_LITERAL_VERTEX_CONST, h1_vertex_shader_flag},

				{T6::MTL_ARG_CODE_PIXEL_SAMPLER, h1_pixel_shader_flag},
				{T6::MTL_ARG_MATERIAL_PIXEL_SAMPLER, h1_pixel_shader_flag},

				{T6::MTL_ARG_MATERIAL_PIXEL_CONST, h1_pixel_shader_flag},
				{T6::MTL_ARG_MATERIAL_VERTEX_CONST, h1_vertex_shader_flag},
			};

			std::unordered_map<T6::MaterialConstSource, H1::MaterialConstSource> mapped_code_consts =
			{
				{T6::CONST_SRC_CODE_LIGHT_POSITION, H1::CONST_SRC_CODE_LIGHT_POSITION},
				{T6::CONST_SRC_CODE_LIGHT_DIFFUSE, H1::CONST_SRC_CODE_LIGHT_DIFFUSE},
				{T6::CONST_SRC_CODE_LIGHT_SPOTDIR, H1::CONST_SRC_CODE_LIGHT_SPOTDIR},
				{T6::CONST_SRC_CODE_LIGHT_SPOTFACTORS, H1::CONST_SRC_CODE_LIGHT_SPOTFACTORS},
				{T6::CONST_SRC_CODE_LIGHT_ATTENUATION, H1::CONST_SRC_CODE_LIGHT_FADEOFFSET}, // 
				{T6::CONST_SRC_CODE_LIGHT_FALLOFF_A, H1::CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT}, //
				{T6::CONST_SRC_CODE_LIGHT_FALLOFF_B, H1::CONST_SRC_CODE_LIGHT_FALLOFF_PLACEMENT1}, //
				{T6::CONST_SRC_CODE_LIGHT_SPOT_MATRIX0, H1::CONST_SRC_CODE_LIGHT_SPOTDIR}, //
				{T6::CONST_SRC_CODE_LIGHT_SPOT_MATRIX1, H1::CONST_SRC_CODE_LIGHT_SPOTDIR1}, //
				{T6::CONST_SRC_CODE_LIGHT_SPOT_MATRIX2, H1::CONST_SRC_CODE_LIGHT_SPOTDIR2}, //
				{T6::CONST_SRC_CODE_LIGHT_SPOT_MATRIX3, H1::CONST_SRC_CODE_LIGHT_SPOTDIR3}, //
				{T6::CONST_SRC_CODE_LIGHT_SPOT_AABB, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_LIGHT_CONE_CONTROL1, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_LIGHT_CONE_CONTROL2, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_LIGHT_SPOT_COOKIE_SLIDE_CONTROL, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_SHADOW_PARMS, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_SHADOWMAP_POLYGON_OFFSET, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_RENDER_TARGET_SIZE, H1::CONST_SRC_CODE_RENDER_TARGET_SIZE},
				{T6::CONST_SRC_CODE_UPSCALED_TARGET_SIZE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR, H1::CONST_SRC_CODE_DOF_EQUATION_VIEWMODEL_AND_FAR_BLUR},
				{T6::CONST_SRC_CODE_DOF_EQUATION_SCENE, H1::CONST_SRC_CODE_DOF_EQUATION_SCENE},
				{T6::CONST_SRC_CODE_DOF_LERP_SCALE, H1::CONST_SRC_CODE_DOF_LERP_SCALE},
				{T6::CONST_SRC_CODE_DOF_LERP_BIAS, H1::CONST_SRC_CODE_DOF_LERP_BIAS},
				{T6::CONST_SRC_CODE_DOF_ROW_DELTA, H1::CONST_SRC_CODE_DOF_ROW_DELTA},
				{T6::CONST_SRC_CODE_PARTICLE_CLOUD_COLOR, H1::CONST_SRC_CODE_PARTICLE_CLOUD_COLOR},
				{T6::CONST_SRC_CODE_GAMETIME, H1::CONST_SRC_CODE_GAMETIME},

				{T6::CONST_SRC_CODE_FILTER_TAP_0, H1::CONST_SRC_CODE_FILTER_TAP_0},
				{T6::CONST_SRC_CODE_FILTER_TAP_1, H1::CONST_SRC_CODE_FILTER_TAP_1},
				{T6::CONST_SRC_CODE_FILTER_TAP_2, H1::CONST_SRC_CODE_FILTER_TAP_2},
				{T6::CONST_SRC_CODE_FILTER_TAP_3, H1::CONST_SRC_CODE_FILTER_TAP_3},
				{T6::CONST_SRC_CODE_FILTER_TAP_4, H1::CONST_SRC_CODE_FILTER_TAP_4},
				{T6::CONST_SRC_CODE_FILTER_TAP_5, H1::CONST_SRC_CODE_FILTER_TAP_5},
				{T6::CONST_SRC_CODE_FILTER_TAP_6, H1::CONST_SRC_CODE_FILTER_TAP_6},
				{T6::CONST_SRC_CODE_FILTER_TAP_7, H1::CONST_SRC_CODE_FILTER_TAP_7},
				{T6::CONST_SRC_CODE_COLOR_MATRIX_R, H1::CONST_SRC_CODE_COLOR_MATRIX_R},
				{T6::CONST_SRC_CODE_COLOR_MATRIX_G, H1::CONST_SRC_CODE_COLOR_MATRIX_G},
				{T6::CONST_SRC_CODE_COLOR_MATRIX_B, H1::CONST_SRC_CODE_COLOR_MATRIX_B},

				{T6::CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION, H1::CONST_SRC_CODE_SHADOWMAP_SWITCH_PARTITION_ARRAY_0},
				{T6::CONST_SRC_CODE_SUNSHADOWMAP_PIXEL_SIZE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_SHADOWMAP_SCALE, H1::CONST_SRC_CODE_SHADOWMAP_SCALE},
				{T6::CONST_SRC_CODE_ZNEAR, H1::CONST_SRC_CODE_ZNEAR},
				{T6::CONST_SRC_CODE_SUN_POSITION, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_SUN_DIFFUSE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_LIGHTING_LOOKUP_SCALE, H1::CONST_SRC_CODE_LIGHTING_LOOKUP_SCALE},
				{T6::CONST_SRC_CODE_DEBUG_BUMPMAP, H1::CONST_SRC_CODE_DEBUG_BUMPMAP},
				{T6::CONST_SRC_CODE_DEBUG_PERFORMANCE, H1::CONST_SRC_CODE_DEBUG_BUMPMAP},
				{T6::CONST_SRC_CODE_MATERIAL_COLOR, H1::CONST_SRC_CODE_MATERIAL_COLOR},
				{T6::CONST_SRC_CODE_FOG, H1::CONST_SRC_CODE_FOG},
				{T6::CONST_SRC_CODE_FOG2, H1::CONST_SRC_CODE_FOG},
				{T6::CONST_SRC_CODE_FOG_COLOR, H1::CONST_SRC_CODE_FOG_COLOR_LINEAR},
				{T6::CONST_SRC_CODE_SUN_FOG, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_SUN_FOG_DIR, H1::CONST_SRC_CODE_FOG_SUN_DIR},
				{T6::CONST_SRC_CODE_SUN_FOG_COLOR, H1::CONST_SRC_CODE_FOG_SUN_COLOR_LINEAR},
				{T6::CONST_SRC_CODE_GLOW_SETUP, H1::CONST_SRC_CODE_GLOW_SETUP},
				{T6::CONST_SRC_CODE_GLOW_APPLY, H1::CONST_SRC_CODE_GLOW_APPLY},
				{T6::CONST_SRC_CODE_COLOR_BIAS, H1::CONST_SRC_CODE_COLOR_BIAS},
				{T6::CONST_SRC_CODE_COLOR_TINT_BASE, H1::CONST_SRC_CODE_COLOR_TINT_BASE},
				{T6::CONST_SRC_CODE_COLOR_TINT_DELTA, H1::CONST_SRC_CODE_COLOR_TINT_DELTA},
				{T6::CONST_SRC_CODE_OUTDOOR_FEATHER_PARMS, H1::CONST_SRC_CODE_OUTDOOR_FEATHER_PARMS},
				{T6::CONST_SRC_CODE_SKY_TRANSITION, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST, H1::CONST_SRC_CODE_SPOT_SHADOWMAP_PIXEL_ADJUST},
				{T6::CONST_SRC_CODE_DLIGHT_SPOT_SHADOWMAP_PIXEL_ADJUST, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE, H1::CONST_SRC_CODE_CLIP_SPACE_LOOKUP_SCALE},
				{T6::CONST_SRC_CODE_CLIP_SPACE_LOOKUP_OFFSET, H1::CONST_SRC_CODE_CLIP_SPACE_LOOKUP_OFFSET},
				{T6::CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX, H1::CONST_SRC_CODE_PARTICLE_CLOUD_MATRIX0},
				{T6::CONST_SRC_CODE_PARTICLE_CLOUD_VEL_WORLD, H1::CONST_SRC_CODE_PARTICLE_CLOUD_VEL_WORLD},
				{T6::CONST_SRC_CODE_DEPTH_FROM_CLIP, H1::CONST_SRC_CODE_DEPTH_FROM_CLIP},
				{T6::CONST_SRC_CODE_CODE_MESH_ARG_0, H1::CONST_SRC_CODE_CODE_MESH_ARG_0},
				{T6::CONST_SRC_CODE_CODE_MESH_ARG_1, H1::CONST_SRC_CODE_CODE_MESH_ARG_1},
				{T6::CONST_SRC_CODE_GRID_LIGHTING_COORDS_AND_VIS, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GRID_LIGHTING_SH_0, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GRID_LIGHTING_SH_1, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GRID_LIGHTING_SH_2, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_REFLECTION_LIGHTING_SH_0, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_REFLECTION_LIGHTING_SH_1, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_REFLECTION_LIGHTING_SH_2, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_WIND_DIRECTION, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_MOTIONBLUR_DIRECTION_AND_MAGNITUDE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_COMPOSITE_FX_DISTORTION, H1::CONST_SRC_CODE_COMPOSITE_FX_DISTORTION},
				{T6::CONST_SRC_CODE_GLOW_BLOOM_SCALE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_COMPOSITE_FX_OVERLAY_TEXCOORD, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_COLOR_BIAS1, H1::CONST_SRC_CODE_COLOR_BIAS},
				{T6::CONST_SRC_CODE_COLOR_TINT_BASE1, H1::CONST_SRC_CODE_COLOR_TINT_BASE},
				{T6::CONST_SRC_CODE_COLOR_TINT_DELTA1, H1::CONST_SRC_CODE_COLOR_TINT_DELTA},
				{T6::CONST_SRC_CODE_POSTFX_FADE_EFFECT, H1::CONST_SRC_CODE_POSTFX_FADE_EFFECT},
				{T6::CONST_SRC_CODE_VIEWPORT_DIMENSIONS, H1::CONST_SRC_CODE_VIEWPORT_DIMENSIONS},
				{T6::CONST_SRC_CODE_FRAMEBUFFER_READ, H1::CONST_SRC_CODE_FRAMEBUFFER_READ},
				{T6::CONST_SRC_CODE_RESIZE_PARAMS1, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_RESIZE_PARAMS2, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_RESIZE_PARAMS3, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_0, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_1, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_2, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_3, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_4, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_5, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_6, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_7, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_8, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_9, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_10, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_11, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_12, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_13, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_14, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_VARIANT_WIND_SPRING_15, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_CHARACTER_CHARRED_AMOUNT, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_POSTFX_CONTROL0, H1::CONST_SRC_CODE_POSTFX_CONTROL0},
				{T6::CONST_SRC_CODE_POSTFX_CONTROL1, H1::CONST_SRC_CODE_POSTFX_CONTROL1},
				{T6::CONST_SRC_CODE_POSTFX_CONTROL2, H1::CONST_SRC_CODE_POSTFX_CONTROL2},
				{T6::CONST_SRC_CODE_POSTFX_CONTROL3, H1::CONST_SRC_CODE_POSTFX_CONTROL3},
				{T6::CONST_SRC_CODE_POSTFX_CONTROL4, H1::CONST_SRC_CODE_POSTFX_CONTROL4},
				{T6::CONST_SRC_CODE_POSTFX_CONTROL5, H1::CONST_SRC_CODE_POSTFX_CONTROL5},
				{T6::CONST_SRC_CODE_POSTFX_CONTROL6, H1::CONST_SRC_CODE_POSTFX_CONTROL6},
				{T6::CONST_SRC_CODE_POSTFX_CONTROL7, H1::CONST_SRC_CODE_POSTFX_CONTROL7},
				{T6::CONST_SRC_CODE_POSTFX_CONTROL8, H1::CONST_SRC_CODE_POSTFX_CONTROL8},
				{T6::CONST_SRC_CODE_POSTFX_CONTROL9, H1::CONST_SRC_CODE_POSTFX_CONTROL9},
				{T6::CONST_SRC_CODE_POSTFX_CONTROLA, H1::CONST_SRC_CODE_POSTFX_CONTROLA},
				{T6::CONST_SRC_CODE_POSTFX_CONTROLB, H1::CONST_SRC_CODE_POSTFX_CONTROLB},
				{T6::CONST_SRC_CODE_POSTFX_CONTROLC, H1::CONST_SRC_CODE_POSTFX_CONTROLC},
				{T6::CONST_SRC_CODE_POSTFX_CONTROLD, H1::CONST_SRC_CODE_POSTFX_CONTROLD},
				{T6::CONST_SRC_CODE_POSTFX_CONTROLE, H1::CONST_SRC_CODE_POSTFX_CONTROLE},
				{T6::CONST_SRC_CODE_POSTFX_CONTROLF, H1::CONST_SRC_CODE_POSTFX_CONTROLF},
				{T6::CONST_SRC_CODE_HDRCONTROL_0, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_HDRCONTROL_1, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GLIGHT_POSXS, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GLIGHT_POSYS, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GLIGHT_POSZS, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GLIGHT_FALLOFFS, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GLIGHT_REDS, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GLIGHT_GREENS, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GLIGHT_BLUES, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DLIGHT_POSITION, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DLIGHT_DIFFUSE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DLIGHT_ATTENUATION, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DLIGHT_FALLOFF, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_0, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_1, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_2, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DLIGHT_SPOT_MATRIX_3, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DLIGHT_SPOT_DIR, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DLIGHT_SPOT_FACTORS, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_0, H1::CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX},
				{T6::CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_1, H1::CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX1},
				{T6::CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_2, H1::CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX2},
				{T6::CONST_SRC_CODE_DLIGHT_SHADOW_LOOKUP_MATRIX_3, H1::CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX3},
				{T6::CONST_SRC_CODE_CLOUD_LAYER_CONTROL0, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_CLOUD_LAYER_CONTROL1, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_CLOUD_LAYER_CONTROL2, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_CLOUD_LAYER_CONTROL3, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_CLOUD_LAYER_CONTROL4, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_HERO_LIGHTING_R, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_HERO_LIGHTING_G, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_HERO_LIGHTING_B, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_LIGHT_HERO_SCALE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_CINEMATIC_BLUR_BOX, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_CINEMATIC_BLUR_BOX2, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_ADSZSCALE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_UI3D_UV_SETUP_0, H1::CONST_SRC_CODE_UI3D_UV_SETUP_0},
				{T6::CONST_SRC_CODE_UI3D_UV_SETUP_1, H1::CONST_SRC_CODE_UI3D_UV_SETUP_1},
				{T6::CONST_SRC_CODE_UI3D_UV_SETUP_2, H1::CONST_SRC_CODE_UI3D_UV_SETUP_2},
				{T6::CONST_SRC_CODE_UI3D_UV_SETUP_3, H1::CONST_SRC_CODE_UI3D_UV_SETUP_3},
				{T6::CONST_SRC_CODE_UI3D_UV_SETUP_4, H1::CONST_SRC_CODE_UI3D_UV_SETUP_4},
				{T6::CONST_SRC_CODE_UI3D_UV_SETUP_5, H1::CONST_SRC_CODE_UI3D_UV_SETUP_5},
				{T6::CONST_SRC_CODE_CHARACTER_DISSOLVE_COLOR, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_CAMERA_LOOK, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_CAMERA_UP, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_CAMERA_SIDE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_RIMINTENSITY, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GENERIC_PARAM0, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GENERIC_PARAM1, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GENERIC_PARAM2, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GENERIC_PARAM3, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GENERIC_PARAM4, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GENERIC_PARAM5, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GENERIC_PARAM6, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GENERIC_PARAM7, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_GENERIC_EYEOFFSET, H1::CONST_SRC_CODE_EYEOFFSET},
				{T6::CONST_SRC_CODE_GENERIC_QUADINTENSITY, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_WEAPON_PARAM0, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_WEAPON_PARAM1, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_WEAPON_PARAM2, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_WEAPON_PARAM3, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_WEAPON_PARAM4, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_WEAPON_PARAM5, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_WEAPON_PARAM6, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_WEAPON_PARAM7, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_WEAPON_PARAM8, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_WEAPON_PARAM9, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_QRCODE_0, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_QRCODE_1, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_QRCODE_2, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_QRCODE_3, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_QRCODE_4, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_QRCODE_5, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_QRCODE_6, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_QRCODE_7, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_QRCODE_8, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_QRCODE_9, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_QRCODE_10, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_QRCODE_11, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_EYEOFFSET, H1::CONST_SRC_CODE_EYEOFFSET},
				{T6::CONST_SRC_CODE_SKY_COLOR_MULTIPLIER, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_EXTRA_CAM_PARAM, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_EMBLEM_LUT_SELECTOR, H1::CONST_SRC_CODE_EMBLEM_LUT_SELECTOR},
				{T6::CONST_SRC_CODE_DEBUG_COLOR_OVERRIDE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DEBUG_ALPHA_OVERRIDE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DEBUG_NORMAL_OVERRIDE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DEBUG_SPECULAR_OVERRIDE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DEBUG_GLOSS_OVERRIDE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_DEBUG_OCCLUSION_OVERRIDE, H1::CONST_SRC_NONE},
				{T6::CONST_SRC_CODE_COUNT_FLOAT4, H1::CONST_SRC_NONE},

				{T6::CONST_SRC_CODE_WORLD_MATRIX, H1::CONST_SRC_CODE_WORLD_MATRIX0},
				{T6::CONST_SRC_CODE_INVERSE_WORLD_MATRIX, H1::CONST_SRC_CODE_INVERSE_WORLD_MATRIX0},
				{T6::CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX, H1::CONST_SRC_CODE_TRANSPOSE_WORLD_MATRIX0},
				{T6::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX, H1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_MATRIX0},
				{T6::CONST_SRC_CODE_VIEW_MATRIX, H1::CONST_SRC_CODE_VIEW_MATRIX},
				{T6::CONST_SRC_CODE_INVERSE_VIEW_MATRIX, H1::CONST_SRC_CODE_INVERSE_VIEW_MATRIX},
				{T6::CONST_SRC_CODE_TRANSPOSE_VIEW_MATRIX, H1::CONST_SRC_CODE_TRANSPOSE_VIEW_MATRIX},
				{T6::CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_MATRIX, H1::CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_MATRIX},
				{T6::CONST_SRC_CODE_PROJECTION_MATRIX, H1::CONST_SRC_CODE_PROJECTION_MATRIX},
				{T6::CONST_SRC_CODE_INVERSE_PROJECTION_MATRIX, H1::CONST_SRC_CODE_INVERSE_PROJECTION_MATRIX},
				{T6::CONST_SRC_CODE_TRANSPOSE_PROJECTION_MATRIX, H1::CONST_SRC_CODE_TRANSPOSE_PROJECTION_MATRIX},
				{T6::CONST_SRC_CODE_INVERSE_TRANSPOSE_PROJECTION_MATRIX, H1::CONST_SRC_CODE_INVERSE_TRANSPOSE_PROJECTION_MATRIX},
				{T6::CONST_SRC_CODE_WORLD_VIEW_MATRIX, H1::CONST_SRC_CODE_WORLD_VIEW_MATRIX0},
				{T6::CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX, H1::CONST_SRC_CODE_INVERSE_WORLD_VIEW_MATRIX0},
				{T6::CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX, H1::CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_MATRIX0},
				{T6::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX, H1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX0},
				{T6::CONST_SRC_CODE_VIEW_PROJECTION_MATRIX, H1::CONST_SRC_CODE_VIEW_PROJECTION_MATRIX},
				{T6::CONST_SRC_CODE_INVERSE_VIEW_PROJECTION_MATRIX, H1::CONST_SRC_CODE_INVERSE_VIEW_PROJECTION_MATRIX},
				{T6::CONST_SRC_CODE_TRANSPOSE_VIEW_PROJECTION_MATRIX, H1::CONST_SRC_CODE_TRANSPOSE_VIEW_PROJECTION_MATRIX},
				{T6::CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_PROJECTION_MATRIX, H1::CONST_SRC_CODE_INVERSE_TRANSPOSE_VIEW_PROJECTION_MATRIX},
				{T6::CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX, H1::CONST_SRC_CODE_WORLD_VIEW_PROJECTION_MATRIX0},
				{T6::CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX, H1::CONST_SRC_CODE_INVERSE_WORLD_VIEW_PROJECTION_MATRIX0},
				{T6::CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX, H1::CONST_SRC_CODE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX0},
				{T6::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX, H1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_VIEW_PROJECTION_MATRIX0},
				{T6::CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX, H1::CONST_SRC_CODE_SHADOW_LOOKUP_MATRIX},
				{T6::CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX, H1::CONST_SRC_CODE_INVERSE_SHADOW_LOOKUP_MATRIX},
				{T6::CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX, H1::CONST_SRC_CODE_TRANSPOSE_SHADOW_LOOKUP_MATRIX},
				{T6::CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX, H1::CONST_SRC_CODE_INVERSE_TRANSPOSE_SHADOW_LOOKUP_MATRIX},
				{T6::CONST_SRC_CODE_WORLD_OUTDOOR_LOOKUP_MATRIX, H1::CONST_SRC_CODE_WORLD_OUTDOOR_LOOKUP_MATRIX},
				{T6::CONST_SRC_CODE_INVERSE_WORLD_OUTDOOR_LOOKUP_MATRIX, H1::CONST_SRC_CODE_INVERSE_WORLD_OUTDOOR_LOOKUP_MATRIX},
				{T6::CONST_SRC_CODE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX, H1::CONST_SRC_CODE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX},
				{T6::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX, H1::CONST_SRC_CODE_INVERSE_TRANSPOSE_WORLD_OUTDOOR_LOOKUP_MATRIX},
			};

			unsigned char get_shader_flags(T6::MaterialShaderArgumentType type)
			{
				const auto iter = mapped_shader_flags.find(type);
				if (iter != mapped_shader_flags.end())
				{
					return iter->second;
				}

				return 0;
			}

			H1::MaterialShaderArgumentType convert_shader_arg_type(T6::MaterialShaderArgumentType type)
			{
				const auto iter = mapped_shader_argument_types.find(type);
				if (iter != mapped_shader_argument_types.end())
				{
					return iter->second;
				}

				//printf("couldn't map shader argument type %i\n", type);
				return H1::MTL_ARG_CODE_CONST;
			}

			H1::MaterialVertexDeclaration* convert_vertex_decl(T6::MaterialVertexDeclaration* vert, allocator& allocator)
			{
				const auto h1_vert = allocator.allocate<H1::MaterialVertexDeclaration>();

				h1_vert->name = allocator.duplicate_string(std::format("t6.vertexdecl.{:#X}", reinterpret_cast<size_t>(vert))); // wtf no name
				h1_vert->streamCount = vert->streamCount;
				h1_vert->hasOptionalSource = vert->hasOptionalSource;

				for (auto i = 0; i < 16 /*32*/; i++) // idk
				{
					h1_vert->routing.data[i].dest = vert->routing.data[i].dest;
					h1_vert->routing.data[i].source = vert->routing.data[i].source;
					h1_vert->routing.data[i].mask = 0; // idk
				}

				return h1_vert;
			}

			H1::MaterialVertexShader* convert_vertex_shader(T6::MaterialVertexShader* shader, allocator& allocator)
			{
				const auto h1_shader = allocator.allocate<H1::MaterialVertexShader>();

				h1_shader->name = allocator.duplicate_string(shader->name + "_t6"s);

				h1_shader->prog.loadDef.program = allocator.allocate<unsigned char>(shader->prog.loadDef.programSize);
				h1_shader->prog.loadDef.programSize = shader->prog.loadDef.programSize;

				std::memcpy(h1_shader->prog.loadDef.program, shader->prog.loadDef.program, shader->prog.loadDef.programSize);
				h1_shader->prog.loadDef.microCodeCrc = crc32(h1_shader->prog.loadDef.program, h1_shader->prog.loadDef.programSize);

				return h1_shader;
			}

			H1::MaterialPixelShader* convert_pixel_shader(T6::MaterialPixelShader* shader, allocator& allocator)
			{
				const auto h1_shader = allocator.allocate<H1::MaterialPixelShader>();

				h1_shader->name = allocator.duplicate_string(shader->name + "_t6"s);

				h1_shader->prog.loadDef.program = allocator.allocate<unsigned char>(shader->prog.loadDef.programSize);
				h1_shader->prog.loadDef.programSize = shader->prog.loadDef.programSize;

				std::memcpy(h1_shader->prog.loadDef.program, shader->prog.loadDef.program, shader->prog.loadDef.programSize);
				h1_shader->prog.loadDef.microCodeCrc = crc32(h1_shader->prog.loadDef.program, h1_shader->prog.loadDef.programSize);

				return h1_shader;
			}

			H1::MaterialArgumentCodeConst convert_code_const(T6::MaterialArgumentCodeConst const_)
			{
				H1::MaterialArgumentCodeConst h1_const{};

				const auto iter = mapped_code_consts.find(static_cast<T6::MaterialConstSource>(const_.index));
				if (iter->second == H1::CONST_SRC_NONE)
				{
					printf("couldn't map code const %i\n", const_.index);
				}
				else
				{
					h1_const.firstRow = 0;
					if (h1_const.index >= H1::CONST_SRC_CODE_VIEW_MATRIX)
					{
						h1_const.rowCount = 4;
					}
					else
					{
						h1_const.rowCount = 1;
					}
				}

				return h1_const;
			}

			H1::MaterialShaderArgument* convert_shader_args(T6::MaterialPass* pass, allocator& allocator)
			{
				const auto count = pass->perPrimArgCount + pass->perObjArgCount + pass->stableArgCount;
				const auto args = allocator.allocate<H1::MaterialShaderArgument>(count);

				for (auto i = 0; i < count; i++)
				{
					args[i].type = convert_shader_arg_type(static_cast<T6::MaterialShaderArgumentType>(pass->args[i].type));
					args[i].dest = pass->args[i].location.offset / pass->args[i].size;
					args[i].shader = get_shader_flags(static_cast<T6::MaterialShaderArgumentType>(pass->args[i].type));

					if (args[i].type == H1::MTL_ARG_CODE_CONST)
					{
						args[i].u.codeConst = convert_code_const(pass->args[i].u.codeConst);
					}
					else
					{
						if (args[i].type == H1::MTL_ARG_LITERAL_CONST)
						{
							args[i].u.literalConst = allocator.allocate<float>(4);
							std::memcpy(const_cast<float* __ptr64>(args[i].u.literalConst), pass->args[i].u.literalConst, 4 * sizeof(float));
						}
						else
						{
							args[i].u.codeSampler = pass->args[i].u.codeSampler;
						}
					}
				}

				return args;
			}

			H1::MaterialTechnique* convert_technique(T6::MaterialTechnique* technique, allocator& allocator)
			{
				const auto size = sizeof(H1::MaterialTechniqueHeader) + sizeof(H1::MaterialPass) * technique->passCount;
				const auto h1_technique = allocator.manual_allocate<H1::MaterialTechnique>(size);

				h1_technique->hdr.passCount = technique->passCount;
				h1_technique->hdr.flags = technique->flags;
				h1_technique->hdr.name = allocator.duplicate_string(technique->name + "_t6"s);

				for (auto i = 0; i < h1_technique->hdr.passCount; i++)
				{
					const auto pass = &h1_technique->passArray[i];
					const auto t6_pass = &technique->passArray[i];

					pass->perPrimArgCount = t6_pass->perPrimArgCount;
					pass->perObjArgCount = t6_pass->perObjArgCount;
					pass->stableArgCount = t6_pass->stableArgCount;
					pass->customSamplerFlags = t6_pass->customSamplerFlags;
					pass->precompiledIndex = t6_pass->precompiledIndex;
				
					if (t6_pass->vertexDecl)
					{
						pass->vertexDecl = convert_vertex_decl(t6_pass->vertexDecl, allocator);
						H1::IVertexDecl::dump(pass->vertexDecl);
					}

					if (t6_pass->vertexShader)
					{
						pass->vertexShader = convert_vertex_shader(t6_pass->vertexShader, allocator);
						H1::IVertexShader::dump(pass->vertexShader);
					}

					if (t6_pass->pixelShader)
					{
						pass->pixelShader = convert_pixel_shader(t6_pass->pixelShader, allocator);
						H1::IPixelShader::dump(pass->pixelShader);
					}

					pass->args = convert_shader_args(t6_pass, allocator);
				}

				return h1_technique;
			}

			H1::MaterialTechniqueSet* generate_h1_technique_set(T6::MaterialTechniqueSet* asset, allocator& allocator)
			{
				const auto h1_asset = allocator.allocate<H1::MaterialTechniqueSet>();
				h1_asset->name = allocator.duplicate_string(asset->name + "_t6"s);
				h1_asset->flags = 0; // ?
				h1_asset->preDisplacementOnlyCount = 0; // ?
				h1_asset->worldVertFormat = convert_world_vert_format(
					static_cast<T6::MaterialWorldVertexFormat>(asset->worldVertFormat));
				
				for (auto i = 0; i < T6::TECHNIQUE_COUNT; i++)
				{
					const auto h1_technique = mapped_techniques.find(static_cast<T6::MaterialTechniqueType>(i));
					if (h1_technique != mapped_techniques.end() && asset->techniques[i] != nullptr)
					{
						h1_asset->techniques[h1_technique->second] = convert_technique(asset->techniques[i], allocator);
					}
				}

				return h1_asset;
			}
		}

		void ITechset::dump(MaterialTechniqueSet* asset)
		{
			allocator allocator;
			const auto h1_asset = generate_h1_technique_set(asset, allocator);
			H1::ITechset::dump(h1_asset);
		}
	}
}
